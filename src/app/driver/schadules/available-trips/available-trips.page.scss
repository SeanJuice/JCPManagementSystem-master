ion-menu-button {
    color: var(--ion-color-primary);
  }
  
  ///@extend////Navigation 
  
  @import "../../../Shared/styels/Navbar.scss";
  ///////////
 
  //////////////////////////buttons and  table
  $breakpoint-alpha: 480px; // adjust to your needs

.rwd-table {
  margin: 1em 0;
  min-width: 1000px; // adjust to your needs
  
  tr {
    border-top: 1px solid #ddd;
    border-bottom: 1px solid #ddd;
  }
  
  th {
    display: none; // for accessibility, use a visually hidden method here instead! Thanks, reddit!   
    font-size: medium;
  }
  
  td {
    display: block; 
    
    &:first-child {
      padding-top: .5em;
    }
    &:last-child {
      padding-bottom: .5em;
    }

    &:before {
      content: attr(data-th)": "; // who knew you could do this? The internet, that's who.
      font-weight: bold;

      // optional stuff to make it look nicer
      width: 6.5em; // magic number :( adjust according to your own content
      display: inline-block;
      // end options
      
      @media (min-width: $breakpoint-alpha) {
        display: none;
      }
    }
  }
  
  th, td {
    text-align: left;
    
    @media (min-width: $breakpoint-alpha) {
      display: table-cell;
      padding: .25em .5em;
      
      &:first-child {
        padding-left: 0;
      }
      
      &:last-child {
        padding-right: 0;
      }
    }

  }
  
  
}


// presentational styling

@import 'https://fonts.googleapis.com/css?family=Montserrat:300,400,700';

body {
  padding: 0 6em;
  font-family: Montserrat, sans-serif;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  color: #444;
  background: #eee;
}

h1 {
  font-weight: normal;
  letter-spacing: -1px;
  color: #34495E;
}

.rwd-table {
  background: #ffff;
  color: #007B7C;
  border-radius: .4em;
  overflow: hidden;
  tr {
    border-color: lighten(#34495E, 10%);
  }
  th, td {
    margin: .5em 1em;
    @media (min-width: $breakpoint-alpha) { 
      padding: 2em !important; 
    }
  }
  th, td:before {
    color: #007B7C      ;
  }

  
}
  //BUTTONS  COLORFULL
  //@extend//@extend
  
  .fill:hover,
  .fill:focus {
    box-shadow: inset 0 0 0 2em var(--hover);
  }
  
  // Animate the size, outside
  .pulse:hover, 
  .pulse:focus {
    animation: pulse 1s;
    box-shadow: 0 0 0 2em rgba(#fff,0);
  }
  
  @keyframes pulse {
    0% { box-shadow: 0 0 0 0 var(--hover); }
  }
  
  // Stack multiple shadows, one from the left, the other from the right
  .close:hover,
  .close:focus {
    box-shadow: 
      inset -3.5em 0 0 0 var(--hover),
      inset 3.5em 0 0 0 var(--hover);  
  }
  
  // Size can also be negative; see how it's smaller than the element
  .raise:hover,
  .raise:focus {
    box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
    transform: translateY(-0.25em);
  }
  
  // Animating from the bottom
  .up:hover,
  .up:focus {
    box-shadow: inset 0 -3.25em 0 0 var(--hover);
  }
  
  // And from the left
  .slide:hover,
  .slide:focus {
    box-shadow: inset 6.5em 0 0 0 var(--hover);
  }
  
  // Multiple shadows, one on the outside, another on the inside
  .offset {  
    box-shadow: 
      0.3em 0.3em 0 0 var(--color),
      inset 0.3em 0.3em 0 0 var(--color);
    
    &:hover,
    &:focus {
      box-shadow: 
        0 0 0 0 var(--hover),
        inset 6em 3.5em 0 0 var(--hover);
    }
  }
  
  //=== Set button colors
  // If you wonder why use Sass vars or CSS custom properties...
    // Make a map with the class names and matching colors
  $colors: (
    fill: #007B7C,
    pulse: rgb(255, 247, 247), 
    close: #ff7f82, 
    raise: #ffa260, 
    up: #e4cb58, 
    slide: #8fc866, 
    offset: #19bc8b
  );
  
  // Sass variables compile to a static string; CSS variables are dynamic and inherited
    // Loop through the map and set CSS custom properties using Sass variables
  @each $button, $color in $colors {
    .#{$button} {
      --color: #{$color};
      --hover: #{adjust-hue($color, 45deg)};
    }
  }
  
  // Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties.
  button {  
    color: var(--color);
    transition: 0.25s;
    
    &:hover,
    &:focus { 
      border-color: var(--hover);
      color: #fff;
    }
  }
  
  //=== Pen styling, ignore
  body {
    color: #fff;
    background: hsl(227, 10%, 10%);
    font: 300 1em 'Fira Sans', sans-serif;
    
    // Center everything ever
    justify-content: center;
    align-content: center;
    align-items: center;
    text-align: center;
    min-height: 100vh;
    display: flex;
  }
  
  // Basic button styles
  button {
    background: none;
    border: 2px solid;
    font: inherit;
    line-height: 1;
    margin: 0.5em;
    padding: 1em 2em;
  }
  
  h1 { font-weight: 400; }
  
  code { 
    color: #e4cb58;
    font: inherit;
  }
     ///Background 
     ion-content {
      --background: #ccc url("../../../folder/Untitleddesign.png") no-repeat center center / cover;
    }
   